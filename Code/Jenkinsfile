pipeline {
    agent any
    
    environment {
        DB_HOST = credentials('db-host')
        DB_USER = credentials('db-user')
        DB_PASSWORD = credentials('db-password')
        DB_NAME = credentials('db-name')
        DB_PORT = credentials('db-port')
    }
    
    stages {
        stage('📥 Checkout') {
            steps {
                checkout scm
                sh '''
                    echo "✅ Código baixado"
                    ls -la Code/
                '''
            }
        }
        
        stage('🐳 Build Images') {
            steps {
                sh '''
                    echo "🔨 Construindo Backend..."
                    docker build -t backend-app ./Code/backend
                    
                    echo "🔨 Construindo Frontend..."
                    docker build -t frontend-app ./Code/frontend
                    
                    echo "✅ Builds concluídos"
                '''
            }
        }
        
        stage('🚀 Deploy') {
            steps {
                sh '''
                    echo "🛑 Parando containers antigos..."
                    docker stop code-backend-1 code-frontend-1 2>/dev/null || echo "Containers não existiam"
                    docker rm code-backend-1 code-frontend-1 2>/dev/null || echo "Containers já removidos"
                    
                    echo "🎯 Iniciando novos containers..."
                    
                    # Backend com variáveis das credenciais do Jenkins
                    docker run -d --name code-backend-1 -p 3000:3000 \
                      -e DB_HOST=${DB_HOST} \
                      -e DB_USER=${DB_USER} \
                      -e DB_PASSWORD=${DB_PASSWORD} \
                      -e DB_NAME=${DB_NAME} \
                      -e DB_PORT=${DB_PORT} \
                      backend-app
                      
                    # Frontend
                    docker run -d --name code-frontend-1 -p 80:80 \
                      frontend-app
                    
                    echo "⏳ Aguardando 30 segundos..."
                    sleep 30
                '''
            }
        }
        
        stage('✅ Verificação') {
            steps {
                sh '''
                    echo "📋 Containers rodando:"
                    docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
                    
                    echo "🔍 Variáveis no container:"
                    docker exec code-backend-1 printenv | grep DB
                    
                    echo "🧪 Testando Backend..."
                    if curl -s -f http://localhost:3000 > /dev/null; then
                        echo "🎉 BACKEND ONLINE - http://23.22.57.128:3000"
                    else
                        echo "❌ BACKEND OFFLINE"
                        docker logs code-backend-1 --tail=20
                    fi
                    
                    echo "🧪 Testando Frontend..."
                    if curl -s -f http://localhost:80 > /dev/null; then
                        echo "🎉 FRONTEND ONLINE - http://23.22.57.128"
                    else
                        echo "❌ FRONTEND OFFLINE"
                        docker logs code-frontend-1 --tail=10
                    fi
                '''
            }
        }
    }
    
    post {
        success {
            echo "🎊 DEPLOY SUCESSO!"
            echo "🌐 Frontend: http://23.22.57.128"
            echo "🔧 Backend: http://23.22.57.128:3000"
        }
        failure {
            echo "💥 DEPLOY FALHOU"
        }
    }
}