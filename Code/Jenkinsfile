pipeline {
    agent any
    
    environment {
        EC2_IP = "23.22.57.128"
    }

    stages {
        stage('📥 Checkout') {
            steps {
                echo "1. 📥 Baixando código atualizado..."
                checkout scm
                sh 'echo "📁 Estrutura atual:" && ls -la Code/'
            }
        }

        stage('🔧 Correção Requirements') {
            steps {
                echo "2. 🔧 Corrigindo requirements.txt..."
                dir('Code') {
                    sh '''
                        echo "🔍 Verificando backend..."
                        ls -la backend/
                        
                        # CORRIGIR: Arquivo se chama 'requirments.txt' mas Dockerfile procura 'requirements.txt'
                        echo "📝 Corrigindo nome do arquivo..."
                        mv backend/requirments.txt backend/requirements.txt 2>/dev/null || echo "✅ Arquivo já está correto"
                        
                        echo "✅ Arquivo corrigido:"
                        ls -la backend/requirements.txt
                    '''
                }
            }
        }

        stage('🔨 Build Backend') {
            steps {
                echo "3. 🐳 Construindo Backend..."
                dir('Code') {
                    sh 'docker build -t backend-app -f backend/Dockerfile ./backend || echo "❌ Build backend falhou"'
                }
            }
        }

        stage('🔨 Build Frontend') {
            steps {
                echo "4. 🐳 Construindo Frontend..."
                dir('Code') {
                    sh 'docker build -t frontend-app -f frontend/Dockerfile ./frontend || echo "❌ Build frontend falhou"'
                }
            }
        }

        stage('🚀 Deploy') {
            steps {
                echo "5. 🚀 Implantando containers..."
                script {
                    sh '''
                        echo "🛑 Parando containers antigos..."
                        # PARA OS CONTAINERS QUE ESTÃO RODANDO (code-frontend-1, code-backend-1)
                        docker stop code-frontend-1 code-backend-1 2>/dev/null || true
                        docker rm code-frontend-1 code-backend-1 2>/dev/null || true
                        
                        echo "🎯 Iniciando novos containers..."
                        docker run -d --name code-backend-1 -p 3000:3000 backend-app || echo "❌ Backend não iniciou"
                        docker run -d --name code-frontend-1 -p 80:80 frontend-app || echo "❌ Frontend não iniciou"
                        
                        sleep 25
                    '''
                }
            }
        }
        
        stage('✅ Verificação') {
            steps {
                echo "6. ✅ Verificando deploy..."
                script {
                    sh 'docker ps --format "table {{.Names}}\t{{.Status}}\t{{.RunningFor}}"'
                    sh '''
                        echo "🧪 Testando serviços..."
                        curl -f http://localhost:3000 >/dev/null 2>&1 && echo "✅ Backend respondendo" || echo "❌ Backend offline"
                        curl -f http://localhost:80 >/dev/null 2>&1 && echo "✅ Frontend respondendo" || echo "❌ Frontend offline"
                    '''
                    sh """
                        echo " "
                        echo "🎉 DEPLOY CONCLUÍDO!"
                        echo "🌐 Frontend: http://${EC2_IP}"
                        echo "🔧 Backend: http://${EC2_IP}:3000"
                        echo " "
                        echo "📝 Seu HTML atualizado deve estar visível agora!"
                        echo " "
                    """
                }
            }
        }
    }

    post {
        always {
            echo "🧹 Pipeline finalizado"
        }
        success {
            echo "✅ SUCESSO! App atualizado em: http://${EC2_IP}"
        }
        failure {
            echo "❌ Erro no pipeline."
        }
    }
}